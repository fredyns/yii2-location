<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace fredyns\region\models\base;

use Yii;
use dosamigos\translateable\TranslateableBehavior;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "rgn_area".
 *
 * @property integer $id
 * @property integer $part_of
 * @property integer $type_id
 * @property string $registrationNumber
 * @property string $phonePrefix
 * @property double $latitude
 * @property double $longitude
 * @property string $recordStatus
 * @property integer $deleted_at
 * @property integer $deleted_by
 * @property integer $created_at
 * @property integer $created_by
 * @property integer $updated_at
 * @property integer $updated_by
 *
 * @property \fredyns\region\models\Area $partOf
 * @property \fredyns\region\models\Area[] $parts
 * @property \fredyns\region\models\Type $type
 * @property \fredyns\region\models\PartCount[] $partCounts
 * @property \fredyns\region\models\Postcode[] $postcodes
 * @property string $aliasModel
 */
abstract class Area extends \yii\db\ActiveRecord
{
    
    /**
     * ENUM field values
     */
    const RECORDSTATUS_ACTIVE = 'active';
    const RECORDSTATUS_DELETED = 'deleted';

    var $enum_labels = false;
    
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'rgn_area';
    }
    
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'blameable' => [
                'class' => BlameableBehavior::className(),
            ],
            'timestamp' => [
                'class' => TimestampBehavior::className(),
            ],
            'translatable' => [
                'class' => TranslateableBehavior::className(),
                // in case you renamed your relation, you can setup its name
                // 'relation' => 'translations',
                'translationAttributes' => [
                    'name',
                    'nickname'
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['part_of', 'type_id', 'deleted_at', 'deleted_by'], 'integer'],
            [['latitude', 'longitude'], 'number'],
            [['recordStatus'], 'string'],
            [['registrationNumber'], 'string', 'max' => 32],
            [['phonePrefix'], 'string', 'max' => 16],
            [['part_of'], 'exist', 'skipOnError' => true, 'targetClass' => \fredyns\region\models\Area::className(), 'targetAttribute' => ['part_of' => 'id']],
            [['type_id'], 'exist', 'skipOnError' => true, 'targetClass' => \fredyns\region\models\Type::className(), 'targetAttribute' => ['type_id' => 'id']],
            ['recordStatus', 'in', 'range' => [
                    self::RECORDSTATUS_ACTIVE,
                    self::RECORDSTATUS_DELETED,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'part_of' => 'Part Of',
            'type_id' => 'Type',
            'registrationNumber' => 'Registration Number',
            'phonePrefix' => 'Phone Prefix',
            'latitude' => 'Latitude',
            'longitude' => 'Longitude',
            'recordStatus' => 'Record Status',
            'created_at' => 'Created At',
            'created_by' => 'Created By',
            'updated_at' => 'Updated At',
            'updated_by' => 'Updated By',
            'deleted_at' => 'Deleted At',
            'deleted_by' => 'Deleted By',
        ];
    }
        
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPartOf()
    {
        return $this->hasOne(\fredyns\region\models\Area::className(), ['id' => 'part_of']);
    }
    
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParts()
    {
        return $this->hasMany(\fredyns\region\models\Area::className(), ['part_of' => 'id']);
    }
    
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getType()
    {
        return $this->hasOne(\fredyns\region\models\Type::className(), ['id' => 'type_id']);
    }
    
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPartCounts()
    {
        return $this->hasMany(\fredyns\region\models\PartCount::className(), ['part_of' => 'id']);
    }
    
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPostcodes()
    {
        return $this->hasMany(\fredyns\region\models\Postcode::className(), ['area_id' => 'id']);
    }
            /**
     * @return \yii\db\ActiveQuery
     */
    public function getTranslations()
    {
        return $this->hasMany(\fredyns\region\models\AreaLang::className(), ['area_id' => 'id']);
    }
            
    /**
     * get column recordStatus enum value label
     * @param string $value
     * @return string
     */
    public static function getRecordStatusValueLabel($value)
    {
        $labels = self::optsRecordStatus();

        if(isset($labels[$value])) {
            return $labels[$value];
        }

        return $value;
    }

    /**
     * column recordStatus ENUM value labels
     * @return array
     */
    public static function optsRecordStatus()
    {
        return [
            self::RECORDSTATUS_ACTIVE => self::RECORDSTATUS_ACTIVE,
            self::RECORDSTATUS_DELETED => self::RECORDSTATUS_DELETED,
        ];
    }
    
}
